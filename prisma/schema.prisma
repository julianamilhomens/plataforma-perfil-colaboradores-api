generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  NORMAL
  MANAGER
}

enum ContractType {
  CLT
  PJ
  FREELANCER
}

enum ProjectStatus {
  PLANNING
  DEVELOPMENT
  COMPLETED
  CANCELLED
}

model User {
  id           String      @id @default(cuid())
  name         String      @db.VarChar(100)
  email        String      @unique @db.VarChar(100)
  password     String
  age          Int
  contractType ContractType @map("contract_type")
  role         UserRole    @default(NORMAL)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  areas        UserArea[]
  projects     UserProject[]

  @@map("users")
}

model Area {
  id          String @id @default(cuid())
  name        String @unique @db.VarChar(50)
  description String?

  // Relacionamentos
  users UserArea[]

  @@map("areas")
}

model Project {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(100)
  description  String?
  deadline     DateTime?
  technologies Json?
  status       ProjectStatus @default(PLANNING)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  users UserProject[]

  @@map("projects")
}

// Tabela de relacionamento User <-> Area
model UserArea {
  userId String @map("user_id")
  areaId String @map("area_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  area Area @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@id([userId, areaId])
  @@map("user_areas")
}

// Tabela de relacionamento User <-> Project
model UserProject {
  userId        String @map("user_id")
  projectId     String @map("project_id")
  roleInProject String? @map("role_in_project") @db.VarChar(50)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("user_projects")
}